<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>graef.io</title><link>https://segraef.github.io/graef.io/</link><description>Recent content on graef.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© {year}</copyright><lastBuildDate>Sun, 21 Feb 2021 13:37:18 +0800</lastBuildDate><atom:link href="https://segraef.github.io/graef.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Function Lock-Workstation locally and remotely</title><link>https://segraef.github.io/graef.io/archive/lock-workstation/</link><pubDate>Sun, 21 Feb 2021 13:37:18 +0800</pubDate><guid>https://segraef.github.io/graef.io/archive/lock-workstation/</guid><description>You can do everything with PowerShell, as well as locking your workstation with one simple function call. Just call the LockWorkstation() function in user32.dll and that&amp;rsquo;s it! The fine thing is, it works on a local and a remote session.
Function Lock-WorkStation { rundll32.exe user32.dll, LockWorkStation } Reference Locking a Computer</description></item><item><title>Get Azure VM Cores (vCPUs) per Region</title><link>https://segraef.github.io/graef.io/blog/az-cores-per-region/</link><pubDate>Sun, 21 Feb 2021 13:37:18 +0800</pubDate><guid>https://segraef.github.io/graef.io/blog/az-cores-per-region/</guid><description>If you need a script which outputs you the overall VMCore amount per region, there you go. This is a snippet from a RunBook which iterates also through each subscription before, so you would get all amount of used cores per subscription as well as per region.
I took the advantage of using Get-AzVMUsage.
$AzureLocations = Get-AzLocation | Select-Object DisplayName $Result = @() ForEach ($AzureLocation in $AzureLocations) { $CoreAmount = Get-AzVMUsage -Location $AzureLocation.</description></item><item><title>Get Azure Active Directoy Tenant ID and Subscription ID</title><link>https://segraef.github.io/graef.io/archive/get-aad-tenant-id-and-subscription-id/</link><pubDate>Thu, 09 Aug 2018 20:17:37 +0800</pubDate><guid>https://segraef.github.io/graef.io/archive/get-aad-tenant-id-and-subscription-id/</guid><description>Requirements Install the Azure PowerShell Install-Module -Name Az -AllowClobber -Scope CurrentUser Get Tenant and Subscription Details during Login To get your Tenant ID / Name and Subscription ID / Name you have several options with PowerShell, one option is using
Connect-AzAccount which directly gives you your default Subscription Name as well as your default Tenant ID after logging in.
Get Tenant and Subscription details from the Context Another option is using</description></item><item><title>How to adjust Windows Failover Cluster 'Response to Resource Failure' Policy</title><link>https://segraef.github.io/graef.io/blog/fc/</link><pubDate>Mon, 01 Jan 2018 20:51:50 +0800</pubDate><guid>https://segraef.github.io/graef.io/blog/fc/</guid><description>The purpose of this article is to show how to adjust Windows Failover Cluster “Response to resource failure” policy.
If a Cluster Core Resource like File Share Witness or Disk Quorum is in a failing state and offline, the cluster runs into jeopardy and will fail once the active node gets rebooted as no vote can be set to the quorum. To avoid this you should decrease the value of time your cluster core resource attempts to restart.</description></item><item><title>Get and Set Timezones via PowerShell remotely</title><link>https://segraef.github.io/graef.io/blog/timezones/</link><pubDate>Wed, 28 Jun 2017 15:27:45 +0800</pubDate><guid>https://segraef.github.io/graef.io/blog/timezones/</guid><description>As published in my Technet Gallery Script Center here , you can get current timezones remotely via PowerShell with Get-Timezones. Get-Timezones is using WMI to communicate with your servers.
Function Get-Timezones { &amp;lt;# .SYNOPSIS Retrieves timezones of local or remote computers via WMI. .DESCRIPTION Retrieves timezones of local or remote computers via WMI. .PARAMETER ComputerName A single Computer or an array of computer names. The default is localhost ($env:COMPUTERNAME). .PARAMETER Credentials Commit Credentials for a different domain.</description></item></channel></rss>