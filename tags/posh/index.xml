<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>posh - Tag - Automate everything</title><link>https://graef.io/tags/posh/</link><description>posh - Tag - Automate everything</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>sebastian@graef.io (Sebastian Gräf)</managingEditor><webMaster>sebastian@graef.io (Sebastian Gräf)</webMaster><lastBuildDate>Fri, 13 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://graef.io/tags/posh/" rel="self" type="application/rss+xml"/><item><title>Fresh Development Setup within 10 Minutes using Winget</title><link>https://graef.io/fresh-development-machine-setup-using-winget-within-10-minutes/</link><pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://graef.io/fresh-development-machine-setup-using-winget-within-10-minutes/</guid><description>&lt;p>Sometimes you have to setup your Laptop/Notebook fresh and also prepare your developer environment and tools you need. I noticed this again today when I rebooted my machine and spent almost 2 hours installing the tools I need to work.&lt;/p>
&lt;p>I have put together a list of commands you can use to prepare your environment using Windows Package Manager (WinGet) for you which gives you a kick start at the next reset and you can continue working directly after 10 minutes.&lt;/p></description></item><item><title>How to install and update Azure PowerShell 7</title><link>https://graef.io/how-to-install-powershell-7/</link><pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://graef.io/how-to-install-powershell-7/</guid><description><![CDATA[<p>Let&rsquo;s keep it easy with these one-liner&rsquo;s you can use for Windows as well as Linux.</p>]]></description></item><item><title>Function Lock-Workstation locally and remotely</title><link>https://graef.io/function-lock-workstation-locally-and-remotely/</link><pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate><author>Author</author><guid>https://graef.io/function-lock-workstation-locally-and-remotely/</guid><description>&lt;p>You can do everything with PowerShell, as well as locking your workstation with one simple function call.&lt;/p></description></item><item><title>Get Local Account Memberships</title><link>https://graef.io/get-local-account-memberships/</link><pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate><author>Author</author><guid>https://graef.io/get-local-account-memberships/</guid><description><![CDATA[<p>Okay, yeah there are plenty of scripts out which give you local accounts via <code>WMI</code> or <code>ADSI</code> and yes scripts exist also which give you all local groups but there is not one which gives you both (of course there are also some) but what if you’re looking to implement this as a CustomScriptExtension to your Azure VM?</p>]]></description></item><item><title>Get Azure Active Directoy Tenant ID and Subscription ID</title><link>https://graef.io/get-aad-tenant-id-and-subscription-id/</link><pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate><author>Author</author><guid>https://graef.io/get-aad-tenant-id-and-subscription-id/</guid><description></description></item><item><title>Get and Set Timezones via PowerShell remotely</title><link>https://graef.io/get-and-set-timezones-via-powershell-remotely/</link><pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate><author>Author</author><guid>https://graef.io/get-and-set-timezones-via-powershell-remotely/</guid><description>As published in my Technet Gallery Script Center here, you can get current timezones remotely via PowerShell with Get-Timezones. Get-Timezones is using WMI to communicate with your servers.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 Function Get-Timezones { &amp;lt;# .</description></item><item><title>Set primary IP address order with multiple IP addresses on a NIC</title><link>https://graef.io/set-primary-ip-address-order-with-multiple-ip-addresses-on-a-nic/</link><pubDate>Sun, 26 Nov 2017 11:29:53 +0800</pubDate><author>Author</author><guid>https://graef.io/set-primary-ip-address-order-with-multiple-ip-addresses-on-a-nic/</guid><description>&lt;p>If you’re running a webserver it may be you have to run different services on the same port and need to use multiple IP addresses on the same network interface. This can happen for SMTP or Exchange Servers using several connectors.&lt;/p></description></item><item><title>Get-LogonHistory: Who was logged on to my server?</title><link>https://graef.io/get-logonhistory-who-was-logged-on-to-my-server/</link><pubDate>Thu, 05 Oct 2017 11:26:46 +0800</pubDate><author>Author</author><guid>https://graef.io/get-logonhistory-who-was-logged-on-to-my-server/</guid><description>&lt;p>Every System Administrator comes into a situation where you want to see who and how many users were logged on to your servers either via Remote Desktop or via script.&lt;/p></description></item><item><title>Get-PSVersions: Retrieve Powershell version remotely</title><link>https://graef.io/get-psversions-retrieve-powershell-version-remotely/</link><pubDate>Fri, 22 Sep 2017 11:51:06 +0800</pubDate><author>Author</author><guid>https://graef.io/get-psversions-retrieve-powershell-version-remotely/</guid><description>Okay at the end it’s a simple $PSVersion wrapped in an Invoke-Command but hey these simple things are needful in case you need to run it against of 100s of servers and not just locally. With the help of Invoke-Command via WinRM and $PSVersionTable.psversion wrapped in a foreach you can retrieve PowerShell version of your remote computers indifferent if you need to use credentials to run it against a different domain than you currently reside.</description></item><item><title>Resolve-DnsNames: Resolve DNS or IP for multiple Computers</title><link>https://graef.io/resolve-dnsnames-resolve-dns-or-ip-for-multiple-computers/</link><pubDate>Sun, 10 Sep 2017 11:47:24 +0800</pubDate><author>Author</author><guid>https://graef.io/resolve-dnsnames-resolve-dns-or-ip-for-multiple-computers/</guid><description>Respective Microsoft&amp;rsquo;s Technet article regarding Resolve-DnsName I have created a function with the ability to run it against more than only one computer. Resolve-DnsNames performs a DNS name query resolution for the specified name.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 Function Resolve-DnsNames { &amp;lt;# .</description></item></channel></rss>