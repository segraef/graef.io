<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Scripts - Tag - Automate everything</title><link>https://graef.io/tags/scripts/</link><description>Scripts - Tag - Automate everything</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>sebastian@graef.io (Sebastian Gräf)</managingEditor><webMaster>sebastian@graef.io (Sebastian Gräf)</webMaster><lastBuildDate>Sun, 01 Aug 2021 09:33:25 +0800</lastBuildDate><atom:link href="https://graef.io/tags/scripts/" rel="self" type="application/rss+xml"/><item><title>How to get a list of PowerShell Aliases</title><link>https://graef.io/get-powershell-aliases/</link><pubDate>Sun, 01 Aug 2021 09:33:25 +0800</pubDate><author>Author</author><guid>https://graef.io/get-powershell-aliases/</guid><description><![CDATA[<blockquote>
<p><strong>Today I learned</strong> How to get a list of PowerShell Aliases.</p>
</blockquote>
<p>An alias is an alternate name for a cmdlet, function, executable file, including scripts. PowerShell includes a set of built-in aliases. You can add your own aliases to the current session and to your PowerShell profile.</p>]]></description></item><item><title>Azure Pipelines Container Agents for Azure Devops</title><link>https://graef.io/azure-pipelines-container-agents-for-azure-devops/</link><pubDate>Mon, 07 Dec 2020 14:06:02 +0800</pubDate><author>Author</author><guid>https://graef.io/azure-pipelines-container-agents-for-azure-devops/</guid><description>&lt;p>Create self-hosted Azure Pipelines Container Agents for Azure Devops.&lt;/p></description></item><item><title>Github Action for Project Bicep Arm Dsl</title><link>https://graef.io/github-action-for-project-bicep-arm-dsl/</link><pubDate>Thu, 03 Sep 2020 17:52:23 +0800</pubDate><author>Author</author><guid>https://graef.io/github-action-for-project-bicep-arm-dsl/</guid><description>&lt;p>All ARM enthusiasts among us will now probably cry out and be happy. Microsoft announced a new ARM DSL, called Bicep. I won’t go into too much detail here, as I’m more into how to use a GitHub Action to use Bicep to generate an ARM template out of a .bice file. But let me give you some context to &lt;a href="https://github.com/Azure/bicep" target="_blank" rel="noopener noreffer">Bicep&lt;/a>.&lt;/p></description></item><item><title>Azure Github Actions and Workflows</title><link>https://graef.io/azure-github-actions-and-workflows/</link><pubDate>Thu, 03 Sep 2020 17:52:07 +0800</pubDate><author>Author</author><guid>https://graef.io/azure-github-actions-and-workflows/</guid><description>&lt;p>Let me give you an introduction how to use the power of GitHub Actions and Workflows to deploy resources into Azure. I’m going to explain you the basics of GitHub Actions, Workflows, runners and how to deploy resources into Azure. At the end of this post you should have understood how GitHub Actions and Workflows work together to give you a kickstart to run your own.&lt;/p></description></item><item><title>Programmatically Create Azure Pipelines</title><link>https://graef.io/programmatically-create-azure-pipelines/</link><pubDate>Sat, 07 Mar 2020 13:10:29 +0800</pubDate><author>Author</author><guid>https://graef.io/programmatically-create-azure-pipelines/</guid><description>&lt;p>This script &lt;a href="https://github.com/segraef/New-AzPipeline" target="_blank" rel="noopener noreffer">New-AzPipeline&lt;/a> lets you programmatically create Azure Pipelines based on your folder structure.&lt;/p></description></item><item><title>Set primary IP address order with multiple IP addresses on a NIC</title><link>https://graef.io/set-primary-ip-address-order-with-multiple-ip-addresses-on-a-nic/</link><pubDate>Sun, 26 Nov 2017 11:29:53 +0800</pubDate><author>Author</author><guid>https://graef.io/set-primary-ip-address-order-with-multiple-ip-addresses-on-a-nic/</guid><description>&lt;p>If you’re running a webserver it may be you have to run different services on the same port and need to use multiple IP addresses on the same network interface. This can happen for SMTP or Exchange Servers using several connectors.&lt;/p></description></item><item><title>Get-LogonHistory: Who was logged on to my server?</title><link>https://graef.io/get-logonhistory-who-was-logged-on-to-my-server/</link><pubDate>Thu, 05 Oct 2017 11:26:46 +0800</pubDate><author>Author</author><guid>https://graef.io/get-logonhistory-who-was-logged-on-to-my-server/</guid><description>&lt;p>Every System Administrator comes into a situation where you want to see who and how many users were logged on to your servers either via Remote Desktop or via script.&lt;/p></description></item><item><title>Get-PSVersions: Retrieve Powershell version remotely</title><link>https://graef.io/get-psversions-retrieve-powershell-version-remotely/</link><pubDate>Fri, 22 Sep 2017 11:51:06 +0800</pubDate><author>Author</author><guid>https://graef.io/get-psversions-retrieve-powershell-version-remotely/</guid><description>Okay at the end it’s a simple $PSVersion wrapped in an Invoke-Command but hey these simple things are needful in case you need to run it against of 100s of servers and not just locally. With the help of Invoke-Command via WinRM and $PSVersionTable.psversion wrapped in a foreach you can retrieve PowerShell version of your remote computers indifferent if you need to use credentials to run it against a different domain than you currently reside.</description></item><item><title>Resolve-DnsNames: Resolve DNS or IP for multiple Computers</title><link>https://graef.io/resolve-dnsnames-resolve-dns-or-ip-for-multiple-computers/</link><pubDate>Sun, 10 Sep 2017 11:47:24 +0800</pubDate><author>Author</author><guid>https://graef.io/resolve-dnsnames-resolve-dns-or-ip-for-multiple-computers/</guid><description>Respective Microsoft&amp;rsquo;s Technet article regarding Resolve-DnsName I have created a function with the ability to run it against more than only one computer. Resolve-DnsNames performs a DNS name query resolution for the specified name.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 Function Resolve-DnsNames { &amp;lt;# .</description></item><item><title>Get-DellTags: Get Dell Tags and Express Service Code remotely</title><link>https://graef.io/get-delltags-get-dell-tags-and-express-service-code-remotely/</link><pubDate>Tue, 15 Aug 2017 11:40:27 +0800</pubDate><author>Author</author><guid>https://graef.io/get-delltags-get-dell-tags-and-express-service-code-remotely/</guid><description>&lt;p>Get DELL Tag and Express Service Code remotely for more than one computer.&lt;/p></description></item></channel></rss>