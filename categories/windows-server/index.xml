<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Windows Server - Category - Automate everything</title><link>https://graef.io/categories/windows-server/</link><description>Windows Server - Category - Automate everything</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>sebastian@graef.io (Sebastian Gräf)</managingEditor><webMaster>sebastian@graef.io (Sebastian Gräf)</webMaster><lastBuildDate>Thu, 21 Feb 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://graef.io/categories/windows-server/" rel="self" type="application/rss+xml"/><item><title>Get Local Account Memberships</title><link>https://graef.io/get-local-account-memberships/</link><pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate><author>Author</author><guid>https://graef.io/get-local-account-memberships/</guid><description><![CDATA[<p>Okay, yeah there are plenty of scripts out which give you local accounts via <code>WMI</code> or <code>ADSI</code> and yes scripts exist also which give you all local groups but there is not one which gives you both (of course there are also some) but what if you’re looking to implement this as a CustomScriptExtension to your Azure VM?</p>]]></description></item><item><title>How to adjust Windows Failover Cluster 'Response to Resource Failure' Policy</title><link>https://graef.io/how-to-adjust-windows-failover-cluster-response-to-resource-failure-policy/</link><pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate><author>Author</author><guid>https://graef.io/how-to-adjust-windows-failover-cluster-response-to-resource-failure-policy/</guid><description><![CDATA[<p>The purpose of this article is to show how to adjust Windows Failover Cluster &ldquo;Response to resource failure&rdquo; policy.</p>]]></description></item><item><title>Get-LogonHistory: Who was logged on to my server?</title><link>https://graef.io/get-logonhistory-who-was-logged-on-to-my-server/</link><pubDate>Thu, 05 Oct 2017 11:26:46 +0800</pubDate><author>Author</author><guid>https://graef.io/get-logonhistory-who-was-logged-on-to-my-server/</guid><description>&lt;p>Every System Administrator comes into a situation where you want to see who and how many users were logged on to your servers either via Remote Desktop or via script.&lt;/p></description></item><item><title>Get-PSVersions: Retrieve Powershell version remotely</title><link>https://graef.io/get-psversions-retrieve-powershell-version-remotely/</link><pubDate>Fri, 22 Sep 2017 11:51:06 +0800</pubDate><author>Author</author><guid>https://graef.io/get-psversions-retrieve-powershell-version-remotely/</guid><description>Okay at the end it’s a simple $PSVersion wrapped in an Invoke-Command but hey these simple things are needful in case you need to run it against of 100s of servers and not just locally. With the help of Invoke-Command via WinRM and $PSVersionTable.psversion wrapped in a foreach you can retrieve PowerShell version of your remote computers indifferent if you need to use credentials to run it against a different domain than you currently reside.</description></item><item><title>Resolve-DnsNames: Resolve DNS or IP for multiple Computers</title><link>https://graef.io/resolve-dnsnames-resolve-dns-or-ip-for-multiple-computers/</link><pubDate>Sun, 10 Sep 2017 11:47:24 +0800</pubDate><author>Author</author><guid>https://graef.io/resolve-dnsnames-resolve-dns-or-ip-for-multiple-computers/</guid><description>Respective Microsoft&amp;rsquo;s Technet article regarding Resolve-DnsName I have created a function with the ability to run it against more than only one computer. Resolve-DnsNames performs a DNS name query resolution for the specified name.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 Function Resolve-DnsNames { &amp;lt;# .</description></item><item><title>Get-DellTags: Get Dell Tags and Express Service Code remotely</title><link>https://graef.io/get-delltags-get-dell-tags-and-express-service-code-remotely/</link><pubDate>Tue, 15 Aug 2017 11:40:27 +0800</pubDate><author>Author</author><guid>https://graef.io/get-delltags-get-dell-tags-and-express-service-code-remotely/</guid><description>&lt;p>Get DELL Tag and Express Service Code remotely for more than one computer.&lt;/p></description></item><item><title>Get-ScsiDisks: Combine Physicaldisk and Logicaldisk Objects</title><link>https://graef.io/get-scsidisks-combine-physicaldisk-and-logicaldisk-objects/</link><pubDate>Thu, 10 Aug 2017 11:48:24 +0800</pubDate><author>Author</author><guid>https://graef.io/get-scsidisks-combine-physicaldisk-and-logicaldisk-objects/</guid><description>Hi there, following function Get-ScsiDisks retrieves disk details for VMWare Guests or any computer with corresponding SCSI disk details like SCSI ID and SCSI Bus. The function concatenates objects consisting of Win32_DiskDrive, Win32_LogicalDisk and Win32_DiskDriveToDiskPartition using WMI. For WinRM you can use Invoke-Command and inject the script.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 Function Get-ScsiDisks { &amp;lt;# .</description></item><item><title>Simulate-Activity: Simulate user mouse and keyboard input with PowerShell</title><link>https://graef.io/simulate-activity-simulate-user-mouse-and-keyboard-input-with-powershell/</link><pubDate>Thu, 10 Aug 2017 11:11:29 +0800</pubDate><author>Author</author><guid>https://graef.io/simulate-activity-simulate-user-mouse-and-keyboard-input-with-powershell/</guid><description>&lt;p>If you want to avoid or block coming up your screensaver locally or remotely, take this nice script.&lt;/p></description></item><item><title>Resolve DNS and IP addresses with PowerShell</title><link>https://graef.io/resolve-dns-and-ip-addresses-with-powershell/</link><pubDate>Mon, 10 Jul 2017 11:12:17 +0800</pubDate><author>Author</author><guid>https://graef.io/resolve-dns-and-ip-addresses-with-powershell/</guid><description><![CDATA[In this case we’re going to use the method GetHostAddresses of the Dns class of the Sytem.Net namespace. For PowerShell 2.0 you can use following Windows PowerShell One Liners:
Name to IP Address (DNS Forward) 1 2 [System.Net.Dns]::GetHostAddresses(&#39;graef.io&#39;) [System.Net.Dns]::GetHostAddresses(&#39;graef.io&#39;).IPAddressToString IP Address to Name (DNS Reverse) 1 2 3 4 5 [System.Net.Dns]::GetHostbyAddress(&#39;85.13.135.42&#39;) HostName Aliases AddressList -------- ------- ----------- graef.io {} {85.13.135.42} As of PowerShell 4.0 you can use the Cmdlet Resolve-DnsName as well as for both Forward and Reverse:]]></description></item><item><title>Show non-present devices in Windows with Device Manager</title><link>https://graef.io/show-non-present-devices-in-windows-with-device-manager/</link><pubDate>Tue, 27 Jun 2017 11:29:53 +0800</pubDate><author>Author</author><guid>https://graef.io/show-non-present-devices-in-windows-with-device-manager/</guid><description>Open PowerShell or Commmand Shell, enter the following
1 2 set devmgr_show_nonpresent_devices=1 devmgmt.msc . This will open your device manager with the ability to show hidden devices. Click on View and select &amp;ldquo;Show hidden devices&amp;rdquo;.
. Select your hidden device you need to remove, right click and select uninstall. That&amp;rsquo;s it!
. In case you need to remove multiple orphan / hidden / ghosted devices like disks on Windows Failover Cluster Nodes you can use Ghostbuster for that.</description></item></channel></rss>